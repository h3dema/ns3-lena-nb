/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2019 Centre Tecnologic de Telecomunicacions de Catalunya (CTTC)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Manuel Requena <manuel.requena@cttc.es>
 */

#include "ns3/boolean.h"
#include "ns3/string.h"
#include "ns3/log.h"

#include "ns3/csma-epc-helper.h"

namespace ns3 {

NS_LOG_COMPONENT_DEFINE ("CsmaEpcHelper");

NS_OBJECT_ENSURE_REGISTERED (CsmaEpcHelper);


CsmaEpcHelper::CsmaEpcHelper ()
  : NoBackhaulEpcHelper ()
{
  NS_LOG_FUNCTION (this);
  // To access the attribute value within the constructor
  ObjectBase::ConstructSelf (AttributeConstructionList ());

  // we use a CSMA network for the backhaul network,
  // a /16 subnet will provide 65534 nodes (eNBs + SGW)
  // (remember that net broadcast and null address are not valid)
  m_s1uIpv4AddressHelper.SetBase ("10.0.0.0", "255.255.0.0");
  m_s1apIpv4AddressHelper.SetBase ("11.0.0.0", "255.255.0.0");

  m_s1uCsmaChannel = CreateObject<CsmaChannel> ();
  m_s1uCsmaChannel->SetAttribute ("DataRate", DataRateValue (m_s1uLinkDataRate));
  m_s1uCsmaChannel->SetAttribute ("Delay", TimeValue (m_s1uLinkDelay));

  CsmaHelper csmah;
  csmah.SetDeviceAttribute ("Mtu", UintegerValue (m_s1uLinkMtu));
  Ptr<Node> sgw = GetSgwNode ();
  NetDeviceContainer sgwDevice = csmah.Install (sgw, m_s1uCsmaChannel);
  NS_LOG_LOGIC ("Ipv4 ifaces of the SGW after installing p2p dev: " << sgw->GetObject<Ipv4> ()->GetNInterfaces ());

  if (m_s1uLinkEnablePcap)
    {
      csmah.EnablePcapAll (m_s1uLinkPcapPrefix);
    }

  Ipv4InterfaceContainer sgwIpIface = m_s1uIpv4AddressHelper.Assign (sgwDevice);
  NS_LOG_LOGIC ("number of Ipv4 ifaces of the SGW after assigning Ipv4 addr to S1 dev: " << sgw->GetObject<Ipv4> ()->GetNInterfaces ());

  m_sgwS1uAddress = sgwIpIface.GetAddress (0);
}

CsmaEpcHelper::~CsmaEpcHelper ()
{
  NS_LOG_FUNCTION (this);
}

TypeId
CsmaEpcHelper::GetTypeId (void)
{
  NS_LOG_FUNCTION_NOARGS ();
  static TypeId tid = TypeId ("ns3::CsmaEpcHelper")
    .SetParent<NoBackhaulEpcHelper> ()
    .SetGroupName("Lte")
    .AddConstructor<CsmaEpcHelper> ()
    .AddAttribute ("S1uLinkDataRate", 
                   "The data rate to be used for the S1-U link",
                   DataRateValue (DataRate ("10Gb/s")),
                   MakeDataRateAccessor (&CsmaEpcHelper::m_s1uLinkDataRate),
                   MakeDataRateChecker ())
    .AddAttribute ("S1uLinkDelay", 
                   "The delay to be used for the S1-U link",
                   TimeValue (Seconds (0)),
                   MakeTimeAccessor (&CsmaEpcHelper::m_s1uLinkDelay),
                   MakeTimeChecker ())
    .AddAttribute ("S1uLinkMtu", 
                   "The MTU of the next S1-U link to be created. Note that, because of the additional GTP/UDP/IP tunneling overhead, you need a MTU larger than the end-to-end MTU that you want to support.",
                   UintegerValue (2000),
                   MakeUintegerAccessor (&CsmaEpcHelper::m_s1uLinkMtu),
                   MakeUintegerChecker<uint16_t> ())
    .AddAttribute ("S1uLinkPcapPrefix",
                   "Prefix for Pcap generated by S1-U link",
                   StringValue ("s1u"),
                   MakeStringAccessor (&CsmaEpcHelper::m_s1uLinkPcapPrefix),
                   MakeStringChecker ())
    .AddAttribute ("S1uLinkEnablePcap",
                   "Enable Pcap for S1-U link",
                   BooleanValue (false),
                   MakeBooleanAccessor (&CsmaEpcHelper::m_s1uLinkEnablePcap),
                   MakeBooleanChecker ())
  ;
  return tid;
}

TypeId
CsmaEpcHelper::GetInstanceTypeId () const
{
  return GetTypeId ();
}

void
CsmaEpcHelper::DoDispose ()
{
  NS_LOG_FUNCTION (this);
}


void
CsmaEpcHelper::AddEnb (Ptr<Node> enb, Ptr<NetDevice> lteEnbNetDevice, uint16_t cellId)
{
  NS_LOG_FUNCTION (this << enb << lteEnbNetDevice << cellId);

  NoBackhaulEpcHelper::AddEnb (enb, lteEnbNetDevice, cellId);

  // Connect the eNB to the CSMA backhaul network
  CsmaHelper csmah;
  csmah.SetDeviceAttribute ("Mtu", UintegerValue (m_s1uLinkMtu));
  NetDeviceContainer enbDevice = csmah.Install (enb, m_s1uCsmaChannel);
  NS_LOG_LOGIC ("Ipv4 ifaces of the eNB after installing p2p dev: " << enb->GetObject<Ipv4> ()->GetNInterfaces ());

  if (m_s1uLinkEnablePcap)
    {
      csmah.EnablePcapAll (m_s1uLinkPcapPrefix);
    }

  Ipv4InterfaceContainer enbIpIface = m_s1uIpv4AddressHelper.Assign (enbDevice);
  NS_LOG_LOGIC ("number of Ipv4 ifaces of the eNB after assigning Ipv4 addr to S1 dev: " << enb->GetObject<Ipv4> ()->GetNInterfaces ());

  Ipv4Address enbS1uAddress = enbIpIface.GetAddress (0);

  NoBackhaulEpcHelper::AddS1Interface (enb, enbS1uAddress, m_sgwS1uAddress);
}

} // namespace ns3
